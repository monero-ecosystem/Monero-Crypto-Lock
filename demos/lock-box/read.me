The Monero Crypto-Lock Digital Lock Box is an encrypted file system container accessible through public-key cryptography 
using the Monero Crypto-Lock protocol. The digital lock box is encrypted using ecryptfs with the passphrase involving a 
specific Monero public address. The lock box can be locked (encrypted) and unlocked (decrypted) using Monero Crypto-Lock.
(We use ecryptfs for these demonstrations, however, other cryptographic tools could also be utilized).

(
  see: http://ecryptfs.sourceforge.net/ecryptfs.pdf
       https://defuse.ca/audits/ecryptfs.htm
)

+ Digital lock-boxes can contain files that represent data as well as executable code.
+ Digital lock-boxes can be compressed (tar.gz) for transport over the network.

The maximum length for an ecryptfs passphrase is 64-characters. So in these simple examples, the first 64-characters of
a Monero address is used for the passphrase.

Digital lock-boxes, being encrypted file system containers, can be compressed (tar.gz) for transport. For security purposes,
it is important that a lock-box is locked (encrypted) before being compressed and ready for transport. This ensures that
the lock-box contents are unreadable during transport.

As stated above, in the first implementation of the demo, the first 64-characters of a specific Monero address is used as
the ecryptfs passphrase. Any valid Monero address will authenticate through the Monero Crypto-Lock authentication, 
however, the address (first 64-characters) that was used to create the lock-box, is the only address that will pass
through the authorization phase to actually unlock the lock-box.

Looking at the code in unlock-lock-box.sh, one can determine that the first 64-characters of a Monero address is 
used to unlock the lock-box. The code does not identify which Monero address is able to unlock the lock-box. 
However, this identification could be determined via social engineering activity.

WHAT FOLLOWS IS EXPERIMENTAL USING ecryptfs for the *-v2 CODE. 

To make this approach even more secure, we provide example code - unlock-lock-box-v2.sh, which accepts a new 
command line argument named algo. The algo parameter specifies an algorithm that is used to transform the first
64-characters of the  Monero address to derive the ecryptfs passphrase. The choices of algorithms are; sha256, 
md4, md5, ripemd160, sha, sha1, sha224, sha384, and whirlpool.

The algo parameter is passed into the program at run time so there is no way to identify the exact algorithm used for
the ecryptfs passphrase.

Observation: On Linux, root, or any user with sudo access is able to lock an already unlocked lock-box, 
since locking the lock-box is simply a Linux umount command.

Additional documentation will follow shortly.
